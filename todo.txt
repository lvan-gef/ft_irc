Impl signal for shutdown via ctrl+c
Impl irc message parser
impl send message back to client
Impl channels
Impl operators
Check what happend when message is more then READ_SIZE
Check if partial messages works
Check for mem leaks
Make epoll_events use MAX_CONNECTIONS now it is a vector that can grow bigger

Error code's for client server gpt:
────────────────────────────── General / Message Formatting Errors

• 401 ERR_NOSUCHNICK
  • Triggered when a client references a nickname that does not exist.
   Example: Sending a PRIVMSG or WHOIS to a nick not currently connected.

• 402 ERR_NOSUCHSERVER
  • Sent if a command references a non‑existent server. (May be less common on a single–server system, but useful if a client accidentally uses server–specific commands.)

• 403 ERR_NOSUCHCHANNEL
  • Returned when a client attempts to interact with a channel that does not exist.

• 404 ERR_CANNOTSENDTOCHAN
  • Indicates that a message cannot be sent to a channel (for instance, if the channel is moderated or the user is otherwise barred from speaking).

• 405 ERR_TOOMANYCHANNELS
  • Returned when a client tries to join more channels than allowed by the server’s limits.

• 406 ERR_WASNOSUCHNICK
  • Used in response to a WHOWAS query when the nickname has no record. (If you support WHOWAS, include this.)

• 407 ERR_TOOMANYTARGETS
  • Sent when a message is addressed to too many recipients simultaneously. It indicates that not all targets could be reached.

• 408 ERR_NOSUCHSERVICE
  • Indicates that a referenced service does not exist. (Relevant if you allow service-like commands.)

• 409 ERR_NOORIGIN
  • Returned when a command is missing the origin parameter that’s required by the protocol.

• 411 ERR_NORECIPIENT
  • Triggered when a command that requires a recipient (like PRIVMSG or NOTICE) is sent without one.

• 412 ERR_NOTEXTTOSEND
  • Indicates that the client tried to send a message without any text.

• 413 ERR_NOTOPLEVEL
  • Returned when a host mask used in a command does not specify a proper toplevel domain.

• 414 ERR_WILDTOPLEVEL
  • Sent when a wildcard is used in a toplevel domain where it isn’t allowed. ────────────────────────────── Command Recognition and Parameter Errors

• 421 ERR_UNKNOWNCOMMAND
  • Sent when the client issues a command that the server does not recognize.

• 422 ERR_NOMOTD
  • Returned if a client requests the Message of the Day (MOTD) but none is available.

• 423 ERR_NOADMININFO
  • Indicates that no administrative information is available for the requested target.

• 424 ERR_FILEERROR
  • Signals that there was an error reading a file (such as the MOTD or an admin file). ────────────────────────────── Nickname and Registration Errors

• 431 ERR_NONICKNAMEGIVEN
  • Returned when a client fails to supply a nickname during registration.

• 432 ERR_ERRONEUSNICKNAME
  • Indicates that the supplied nickname contains invalid characters or is otherwise malformed.

• 433 ERR_NICKNAMEINUSE
  • Sent when the nickname chosen by a client is already in use by someone else.

• 436 ERR_NICKCOLLISION
  • Used when a nickname collision is detected (usually during simultaneous registration or network splits).

• 437 ERR_UNAVAILRESOURCE
  • Sometimes used to indicate that the nickname or channel is temporarily unavailable. ────────────────────────────── Channel-Specific Errors

• 441 ERR_USERNOTINCHANNEL
  • Returned when an action (like a kick or a mode change) is attempted on a user who isn’t in the specified channel.

• 442 ERR_NOTONCHANNEL
  • Similar to 441; used when a client issues a command for a channel they aren’t a member of.

• 443 ERR_USERONCHANNEL
  • Sent when a client tries to join a channel they’re already in.

• 471 ERR_CHANNELISFULL
  • Indicates that a channel has reached its user limit and no additional users can join.

• 472 ERR_UNKNOWNMODE
  • Returned when a client attempts to set a mode flag that the server does not recognize.

• 473 ERR_INVITEONLYCHAN
  • Sent if a client tries to join an invite‑only channel without being invited.

• 474 ERR_BANNEDFROMCHAN
  • Indicates that the client is banned from joining the channel.

• 475 ERR_BADCHANNELKEY
  • Returned when the channel is password-protected and the client provides an incorrect key.

• 476 ERR_BADCHANMASK
  • Sent when the provided channel mask is malformed. ────────────────────────────── Registration, Privilege, and Mode Errors

• 451 ERR_NOTREGISTERED
  • Indicates that a client issued a command that requires prior registration, but they haven’t completed the registration process yet.

• 461 ERR_NEEDMOREPARAMS
  • Returned when a client’s command is missing one or more required parameters.

• 462 ERR_ALREADYREGISTERED
  • Sent when a client tries to register again after already having completed registration.

• 463 ERR_NOPERMFORHOST
  • Indicates that the client’s host does not have sufficient privileges to execute the command.

• 464 ERR_PASSWDMISMATCH
  • Returned when the client supplies an incorrect password during registration or operator login.

• 465 ERR_YOUREBANNEDCREEP
  • Sent when a banned client attempts to connect to the server. ────────────────────────────── Operator and User Mode Errors

• 482 ERR_CHANOPRIVSNEEDED
  • Indicates that the client attempted an action on a channel (such as changing the topic or kicking a user) but is not a channel operator.

• 483 ERR_CANTKILLSERVER
  • Sent if a client attempts to kill the server (an action reserved for specific server-side commands).

• 491 ERR_NOOPERHOST
  • Returned when a client tries to gain operator privileges (OPER command) from a disallowed host.

• 501 ERR_UMODEUNKNOWNFLAG
  • Indicates that an unknown user mode flag was specified in a MODE command.

• 502 ERR_USERSDONTMATCH
  • Sent when a client tries to change a mode or perform an action on another user’s settings. ──────────────────────────────
